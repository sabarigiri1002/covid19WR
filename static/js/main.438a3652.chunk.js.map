{"version":3,"sources":["serviceWorker.js","config/apiCalls.jsx","config/helpers.jsx","components/atom/SmallTextDangerComponent/index.jsx","components/template/CountryDetails/index.jsx","components/organism/LineChartComponent/index.jsx","components/organism/BarChartComponent/index.jsx","components/page/HomePage/index.jsx","components/organism/NavbarMenu/index.jsx","components/organism/Navbar/index.jsx","components/template/PageLayout/index.jsx","components/page/FullDetailsScreen/index.jsx","config/routes.jsx","index.js"],"names":["Boolean","window","location","hostname","match","URL","GET_CONSOLIDATED_REPORT","concat","GET_COUNTRY_REPOR_BY_NAME","URL_FOR_DAY_REPORT","apiCalls","getConsolidatedReport","this","doGETCall","getAllCountreyReport","getCountreyReportByName","COUNTRY_NAME","getDayWiseCountreyReportByName","REQUEST_URL","axios","get","then","res","data","catch","err","console","error","numberWithCommas","numberData","parseFloat","toString","replace","SmallTextDangerComponent","props","children","className","class","Component","CountryDetails","countryReport","country","countryInfo","src","flag","alt","width","todayCases","cases","recovered","active","casesPerOneMillion","todayDeaths","deaths","deathsPerOneMillion","LineChartComponent","state","dayWiseReport","nextProps","countryName","dayWiseReportData","setState","timeline","options","title","text","subtitle","yAxis","xAxis","categories","Object","keys","plotOptions","series","label","connectorAllowed","name","color","values","responsive","rules","condition","maxWidth","chartOptions","legend","layout","align","verticalAlign","highcharts","Highcharts","BarChartComponent","countryFullReport","globalReport","countriesList","map","value","key","slice","countriesCount","log","chart","type","min","labels","overflow","tooltip","valueSuffix","bar","dataLabels","enabled","x","y","floating","borderWidth","backgroundColor","defaultOptions","shadow","credits","HomePage","currentGlobalReport","currentGlobalReportData","IndiaReport","filter","asOfDate","updated","Date","href","length","NavbarMenu","id","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","PageLayout","FullDetailsScreen","currentAllCountryReport","worldReport","currentAllCountryReportData","countryReportData","countryData","index","onClick","bind","Fragment","routes","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.438a3652.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\n\r\nconst URL = \"https://corona.lmao.ninja/\";\r\nconst GET_CONSOLIDATED_REPORT = URL.concat(\"all\");\r\nconst GET_COUNTRY_REPOR_BY_NAME = URL.concat(\"countries/\");\r\nconst URL_FOR_DAY_REPORT = URL.concat(\"v2/historical/\");\r\n\r\n\r\nconst apiCalls = {\r\n    \r\n    getConsolidatedReport() {\r\n        return this.doGETCall(GET_CONSOLIDATED_REPORT);\r\n    },\r\n    \r\n    getAllCountreyReport() {\r\n        return this.doGETCall(GET_COUNTRY_REPOR_BY_NAME.concat('?sort=active'));\r\n    },\r\n    \r\n    getCountreyReportByName(COUNTRY_NAME) {\r\n        return this.doGETCall(GET_COUNTRY_REPOR_BY_NAME.concat(COUNTRY_NAME));\r\n    },\r\n\r\n    getDayWiseCountreyReportByName(COUNTRY_NAME){\r\n        return this.doGETCall(URL_FOR_DAY_REPORT.concat(COUNTRY_NAME));\r\n    },\r\n\r\n    doGETCall(REQUEST_URL) {\r\n        return axios.get(REQUEST_URL)\r\n            .then((res) => res.data)\r\n            .catch((err) => {\r\n                console.error(`Error in getCurrentWeather:  ${err}`);\r\n            });\r\n    }\r\n}\r\n\r\nexport default apiCalls;","export const numberWithCommas = function (numberData) {\r\n    if(!numberData){\r\n        return \"\";\r\n    }\r\n    return parseFloat(numberData).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n};","import React, { Component } from 'react';\r\n\r\nimport { numberWithCommas } from './../../../config/helpers'\r\n\r\nexport default class SmallTextDangerComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props\r\n\r\n        return (\r\n            <span className=\"small text-danger\">\r\n                ( <span class=\"oi oi-arrow-top\" ></span>{children ? children : 0})\r\n            </span >\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nimport SmallTextDangerComponent from './../../atom/SmallTextDangerComponent';\r\n\r\nimport { numberWithCommas } from './../../../config/helpers';\r\n\r\n\r\n\r\nexport default class CountryDetails extends Component {\r\n    static propTypes = {\r\n        prop: PropTypes\r\n    }\r\n\r\n    render() {\r\n        const countryReport = this.props.countryReport;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-10 text-left\">\r\n                            <h5>Report details for {countryReport.country }  &nbsp;\r\n                            {\r\n                                countryReport.countryInfo ?\r\n                                    <img src={`${countryReport.countryInfo.flag}`} alt={countryReport.country} width=\"30\"></img> : \"\"\r\n                            }</h5>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-4\">\r\n                            <div class=\"card text-center border-light\">\r\n                                <div class=\"card-body\">\r\n                                    <p class=\"card-text\">Total reported cases</p>\r\n                                    <h5 className=\"text-info\">\r\n                                        <SmallTextDangerComponent>{numberWithCommas(countryReport.todayCases)}</SmallTextDangerComponent>\r\n                                        {numberWithCommas(countryReport.cases)}\r\n                                    </h5>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4\">\r\n                            <div class=\"card text-center border-light\">\r\n                                <div class=\"card-body\">\r\n                                    <p class=\"card-text\">Total recovered cases</p>\r\n                                    <h5 className=\"text-success\">{numberWithCommas(countryReport.recovered)}</h5>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4\">\r\n                            <div class=\"card text-center border-light\">\r\n                                <div class=\"card-body\">\r\n                                    <p class=\"card-text\">Total confirmed cases</p>\r\n                                    <h5 className=\"text-active\">{numberWithCommas(countryReport.active)}</h5>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4\">\r\n                            <div class=\"card text-center border-light\">\r\n                                <div class=\"card-body\">\r\n                                    <p class=\"card-text\">Cases per Million</p>\r\n                                    <h5 className=\"text-info\">{numberWithCommas(countryReport.casesPerOneMillion)}</h5>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4\">\r\n                            <div class=\"card text-center border-light\">\r\n                                <div class=\"card-body\">\r\n                                    <p class=\"card-text\">Total deaths cases</p>\r\n                                    <h5 className=\"text-danger\">\r\n                                        <SmallTextDangerComponent>{numberWithCommas(countryReport.todayDeaths)}</SmallTextDangerComponent>\r\n                                        {numberWithCommas(countryReport.deaths)}</h5>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4\">\r\n                            <div class=\"card text-center border-light\">\r\n                                <div class=\"card-body\">\r\n                                    <p class=\"card-text\">Deaths per Million</p>\r\n                                    <h5 className=\"text-danger\">{numberWithCommas(countryReport.deathsPerOneMillion)}</h5>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nimport apiCalls from '../../../config/apiCalls';\r\n\r\nexport default class LineChartComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dayWiseReport: {}\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        const { countryName } = this.props;\r\n        if (nextProps.countryName !== countryName) {\r\n            this.getDayWiseCountreyReportByName(countryName);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { countryName } = this.props;\r\n        this.getDayWiseCountreyReportByName(countryName);\r\n    }\r\n\r\n    getDayWiseCountreyReportByName(countryName = \"all\") {\r\n\r\n        apiCalls.getDayWiseCountreyReportByName(countryName)\r\n            .then(dayWiseReportData => {\r\n                this.setState({\r\n                    dayWiseReport: dayWiseReportData.timeline ? dayWiseReportData.timeline : dayWiseReportData\r\n                })\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { deaths, recovered, cases } = this.state.dayWiseReport;\r\n        const options = {\r\n            title: {\r\n                text: this.props.title\r\n            },\r\n\r\n            subtitle: {\r\n                text: 'Source: NovelCOVID'\r\n            },\r\n\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Number of People'\r\n                }\r\n            },\r\n\r\n            xAxis: {\r\n                categories: cases ? Object.keys(cases) : [1, 2, 3, 4]\r\n            },\r\n\r\n            plotOptions: {\r\n                series: {\r\n                    label: {\r\n                        connectorAllowed: false\r\n                    },\r\n                    // marker: {\r\n                    //     enabled: false\r\n                    // }\r\n                }\r\n            },\r\n\r\n            series: [{\r\n                name: 'Total cases',\r\n                color: '#dc3545',\r\n                data: cases ? Object.values(cases) : [1, 2, 3, 4]\r\n            }, {\r\n                name: 'Deaths',\r\n                color: '#ffc107',\r\n                data: deaths ? Object.values(deaths) : [1, 2, 3, 4]\r\n            }, {\r\n                name: 'Recovered',\r\n                data: recovered ? Object.values(recovered) : [1, 2, 3, 4]\r\n            }],\r\n\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 500\r\n                    },\r\n                    chartOptions: {\r\n                        legend: {\r\n                            layout: 'horizontal',\r\n                            align: 'center',\r\n                            verticalAlign: 'bottom'\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n        };\r\n        return (\r\n\r\n            <HighchartsReact highcharts={Highcharts} options={options} />\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nimport apiCalls from '../../../config/apiCalls';\r\n\r\nexport default class BarChartComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countryFullReport: {}\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const globalReport = this.props.globalReport;\r\n        const countriesList = globalReport.map((value,key)=>{ return value.country }).slice(0,10);\r\n        const countriesCount = globalReport.map((value,key)=>{ return value.active }).slice(0,10);\r\n        console.log(globalReport);\r\n        console.log(countriesCount);\r\n        const options = {\r\n            chart: {\r\n                type: 'bar'\r\n            },\r\n            title: {\r\n                text: 'Top 10 affected countries'\r\n            },\r\n            subtitle: {\r\n                text: 'Source: NovelCOVID'\r\n            },\r\n            xAxis: {\r\n                categories: countriesList,\r\n                title: {\r\n                    text: null\r\n                }\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                title: {\r\n                    text: 'Total Cases',\r\n                    align: 'high'\r\n                },\r\n                labels: {\r\n                    overflow: 'justify'\r\n                }\r\n            },\r\n            tooltip: {\r\n                valueSuffix: ' People'\r\n            },\r\n            plotOptions: {\r\n                bar: {\r\n                    dataLabels: {\r\n                        enabled: true\r\n                    }\r\n                }\r\n            },\r\n            legend: {\r\n                layout: 'vertical',\r\n                align: 'right',\r\n                verticalAlign: 'top',\r\n                x: -40,\r\n                y: 80,\r\n                floating: true,\r\n                borderWidth: 1,\r\n                backgroundColor:\r\n                    Highcharts.defaultOptions.legend.backgroundColor || '#FFFFFF',\r\n                shadow: true,\r\n                enabled : false\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            series: [{\r\n                name: 'Total active cases',\r\n                data: countriesCount,\r\n                color: '#dc3545',\r\n            }]\r\n        };\r\n        return (\r\n\r\n            <HighchartsReact highcharts={Highcharts} options={options} />\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport apiCalls from '../../../config/apiCalls';\r\nimport CountryDetails from '../../template/CountryDetails';\r\nimport { numberWithCommas } from './../../../config/helpers';\r\n\r\nimport LineChartComponent from './../../organism/LineChartComponent';\r\nimport BarChartComponent from './../../organism/BarChartComponent';\r\n\r\n\r\nexport default class HomePage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentGlobalReport: {},\r\n            countryReport: {},\r\n            globalReport: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        apiCalls.getConsolidatedReport()\r\n            .then(currentGlobalReportData => {\r\n                apiCalls.getAllCountreyReport()\r\n                    .then(countryReport => {\r\n                        const IndiaReport = countryReport.filter((value) => value.country == \"India\");\r\n                        this.setState({\r\n                            currentGlobalReport: currentGlobalReportData,\r\n                            countryReport: IndiaReport[0],\r\n                            globalReport: countryReport\r\n                        })\r\n                    });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { currentGlobalReport, countryReport, globalReport } = this.state;\r\n        let asOfDate = currentGlobalReport.updated ? (new Date(currentGlobalReport.updated)) : '';\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6 col-sm-12 text-left\">\r\n                            <h5>Global report summary</h5>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12 text-right\">\r\n                            <a href=\"/fullDetailsScreen\">View Details</a>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-4\">\r\n                                    <div class=\"card text-center border-light\">\r\n                                        <div class=\"card-body\">\r\n                                            <p class=\"card-text\">Total reported cases</p>\r\n                                            <h5 className=\"text-info\">{numberWithCommas(currentGlobalReport.cases)}</h5>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-4\">\r\n                                    <div class=\"card text-center border-light\">\r\n                                        <div class=\"card-body\">\r\n                                            <p class=\"card-text\">Total recovered cases</p>\r\n                                            <h5 className=\"text-success\">{numberWithCommas(currentGlobalReport.recovered)}</h5>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-4\">\r\n                                    <div class=\"card text-center border-light\">\r\n                                        <div class=\"card-body\">\r\n                                            <p class=\"card-text\">Total confirmed cases</p>\r\n                                            <h5 className=\"text-active\">{numberWithCommas(currentGlobalReport.active)}</h5>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-4 offset-md-4\">\r\n                                    <div class=\"card text-center border-light\">\r\n                                        <div class=\"card-body\">\r\n                                            <p class=\"card-text\">Total deaths cases</p>\r\n                                            <h5 className=\"text-danger\">{numberWithCommas(currentGlobalReport.deaths)}</h5>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                {\r\n                                    countryReport.country ? <CountryDetails countryReport={countryReport} /> : \"\"\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            {\r\n                                globalReport.length > 0 ? <BarChartComponent globalReport={globalReport} /> : \"\"\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 col-sm-12 text-right\">\r\n                            <h6>Last update on <b>{asOfDate.toString()}</b></h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class NavbarMenu extends Component {\r\n    static propTypes = {\r\n        prop: PropTypes\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul class=\"navbar-nav mr-auto\">\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"/fullDetailsScreen\">Global Report</a>\r\n                    </li>\r\n                    {/* <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"/viewIndiaDetailsScreen\">India Report</a>\r\n                    </li> */}\r\n                </ul>\r\n                {/* <form class=\"form-inline my-2 my-lg-0\">\r\n                    <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                    <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                </form> */}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport NavbarMenu from './../../organism/NavbarMenu'\r\n\r\nexport default class Navbar extends Component {\r\n    static propTypes = {\r\n        prop: PropTypes\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <a class=\"navbar-brand mb-0 h1\" href=\"/\">COVID-19 Report <span class=\"oi oi-globe\"></span></a>\r\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span class=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <NavbarMenu />\r\n            </nav>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Navbar from './../../organism/Navbar';\r\n\r\nimport './style.css';\r\n\r\nexport default class PageLayout extends Component {\r\n    static propTypes = {\r\n        prop: PropTypes\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <div className=\"ncontainer-fluid\">\r\n                    <div className=\"main-section\">\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nimport apiCalls from '../../../config/apiCalls';\r\nimport { numberWithCommas } from './../../../config/helpers';\r\n\r\nimport CountryDetails from './../../template/CountryDetails';\r\nimport LineChartComponent from './../../organism/LineChartComponent';\r\nimport SmallTextDangerComponent from './../../atom/SmallTextDangerComponent'\r\n\r\nimport \"./index.css\";\r\n\r\n\r\nexport default class FullDetailsScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentAllCountryReport: null,\r\n            countryReport: null,\r\n            worldReport: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        apiCalls.getAllCountreyReport()\r\n            .then(currentAllCountryReportData => {\r\n                // const worldStatuData = currentAllCountryReportData[0];\r\n                // delete currentAllCountryReportData[0];\r\n                // this.setState({\r\n                //     currentAllCountryReport: currentAllCountryReportData,\r\n                //     worldReport: worldStatuData\r\n                // })\r\n                // this.getCountreyReportByName(currentAllCountryReportData[1].country);\r\n                // const worldStatuData = currentAllCountryReportData[0];\r\n                // delete currentAllCountryReportData[0];\r\n                this.setState({\r\n                    currentAllCountryReport: currentAllCountryReportData\r\n                })\r\n                this.getCountreyReportByName(currentAllCountryReportData[0].country);\r\n            });\r\n    }\r\n    getCountreyReportByName(country) {\r\n        apiCalls.getCountreyReportByName(country)\r\n            .then(countryReportData => {\r\n                this.setState({\r\n                    countryReport: countryReportData\r\n                })\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { currentAllCountryReport, countryReport, worldReport } = this.state;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12\">\r\n                            <a href=\"/\" className=\"btn btn-sm btn-link\"> Back</a>\r\n                            <br />\r\n                            <h5>Global Report</h5>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        currentAllCountryReport ?\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-6 table-responsive table-verticalScroll\">\r\n                                    <table id=\"datatable\" className=\"table table-hover table-striped table-bordered country-table table-fixed\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th className=\"text-left\">Country</th>\r\n                                                <th className=\"text-center\">Flag</th>\r\n                                                <th className=\"text-right text-danger\">\r\n                                                    (<span class=\"oi oi-arrow-top small\"></span>) Total <span class=\"oi oi-sort-descending small\"></span>\r\n                                                    {/* <br />\r\n                                                    <small>(+{numberWithCommas(worldReport.todayCases)}) </small>\r\n                                                    {numberWithCommas(worldReport.cases)} */}\r\n                                                </th>\r\n                                                <th className=\"text-right text-success\">\r\n                                                    Recovered\r\n                                                    {/* <br />\r\n                                                    {numberWithCommas(worldReport.recovered)} */}\r\n                                                </th>\r\n                                                <th className=\"text-right text-info\">\r\n                                                    Active\r\n                                                    {/* <br />\r\n                                                    {numberWithCommas(worldReport.active)} */}\r\n                                                </th>\r\n                                                <th className=\"text-right text-dark\">\r\n                                                    (<span class=\"oi oi-arrow-top small\"></span>) Deaths\r\n                                                    {/* <br />\r\n                                                    <small className=\"text-danger \">(+{numberWithCommas(worldReport.todayDeaths)}) </small>\r\n                                                    {numberWithCommas(worldReport.deaths)} */}\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                currentAllCountryReport.map((countryData, index) => {\r\n                                                    const { country, countryInfo, deaths, todayDeaths,\r\n                                                        cases, todayCases,\r\n                                                        recovered, active } = countryData\r\n                                                    return (\r\n                                                        <tr key={index}>\r\n                                                            <td className=\"text-left\">\r\n                                                                <button className=\"btn-link btn-sm btn\" onClick={this.getCountreyReportByName.bind(this, country)}>\r\n                                                                    {country}\r\n                                                                </button>\r\n                                                            </td>\r\n                                                            <td className=\"text-center\"><img src={`${countryInfo.flag}`} width=\"20\"></img></td>\r\n                                                            <td className=\"text-right\">\r\n                                                                <SmallTextDangerComponent >{numberWithCommas(todayCases)} </SmallTextDangerComponent>\r\n                                                                {numberWithCommas(cases)}\r\n                                                            </td>\r\n                                                            <td className=\"text-right\">{numberWithCommas(recovered)}</td>\r\n                                                            <td className=\"text-right\">{numberWithCommas(active)}</td>\r\n                                                            <td className=\"text-right\">\r\n                                                                <SmallTextDangerComponent >{numberWithCommas(todayDeaths)} </SmallTextDangerComponent>\r\n                                                                {numberWithCommas(deaths)}\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                                <div className=\"col-lg-6\">\r\n                                    {\r\n                                        countryReport ?\r\n                                            <React.Fragment>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-lg-12\">\r\n                                                        <CountryDetails countryReport={countryReport} />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-lg-12\">\r\n                                                        <LineChartComponent countryName={countryReport.country} />\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                            </React.Fragment>\r\n                                            : \"\"\r\n                                    }\r\n                                </div>\r\n                            </div> : \"\"\r\n                    }\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport HomePage from './../components/page/HomePage';\r\nimport PageLayout from './../components/template/PageLayout';\r\nimport FullDetailsScreen from './../components/page/FullDetailsScreen'\r\n\r\nconst routes = (\r\n  <PageLayout>\r\n    <Router>\r\n      <Route exact path=\"/\" component={HomePage} />\r\n      <Route exact path=\"/fullDetailsScreen\" component={FullDetailsScreen} />\r\n    </Router>\r\n  </PageLayout>\r\n);\r\n\r\nexport default routes;\r\n","\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport routes from './config/routes'\r\n\r\n\r\nReactDOM.render(\r\n  routes,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}